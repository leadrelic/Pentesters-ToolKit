import subprocess
import cmd
import signal
import sys
import requests
import hashlib
import base64
from cryptography.fernet import Fernet
from Modules.nmap import NmapModule



def signal_handler(sig, frame):
    print('\nCaught interrupt signal, exiting...')
    sys.exit(0)


# Set the signal handler for SIGINT
signal.signal(signal.SIGINT, signal_handler)


class EncryptionDecryptionModule(cmd.Cmd):
    prompt = '(encryption) '
    intro = 'Encryption/Decryption Module. Type help or ? to list commands.\n'


    def do_encrypt(self, arg):
        """Encrypt a message.\nUsage: encrypt <message>"""
        if not arg:
            print("Please provide a message to encrypt.")
            return
        key = Fernet.generate_key()
        cipher_suite = Fernet(key)
        cipher_text = cipher_suite.encrypt(arg.encode())
        print(f"Encrypted message: {cipher_text.decode()}")
        print(f"Key (save this to decrypt): {key.decode()}")


    def do_decrypt(self, arg):
        """Decrypt a message.\nUsage: decrypt <encrypted_message> <key>"""
        args = arg.split()
        if len(args) != 2:
            print("Usage: decrypt <encrypted_message> <key>")
            return
        encrypted_message, key = args
        cipher_suite = Fernet(key.encode())
        try:
            plain_text = cipher_suite.decrypt(encrypted_message.encode())
            print(f"Decrypted message: {plain_text.decode()}")
        except Exception as e:
            print(f"Failed to decrypt message: {e}")


    def do_hash(self, arg):
        """Generate a hash of the message.\nUsage: hash <message> <algorithm>"""
        args = arg.split()
        if len(args) != 2:
            print("Usage: hash <message> <algorithm>")
            return
        message, algorithm = args
        try:
            if algorithm.lower() in hashlib.algorithms_available:
                hash_func = getattr(hashlib, algorithm.lower())
                hash_digest = hash_func(message.encode()).hexdigest()
                print(f"Hash ({algorithm}): {hash_digest}")
            else:
                print(f"Algorithm {algorithm} is not supported.")
        except Exception as e:
            print(f"Failed to generate hash: {e}")


    def do_quit(self, arg):
        """Return to the main menu."""
        print("Exiting Encryption/Decryption Module.")
        return True





class IPTraceModule(cmd.Cmd):
    prompt = '(iptrace) '
    intro = 'IP Trace Module. Type help or ? to list commands.\n'

    def do_trace(self, arg):
        "Trace IP: trace <IP address>"
        if not arg:
            print("You must specify an IP address to trace.")
            return
        response = self.query_ip(arg)
        if response:
            self.print_ip_info(response)
        else:
            print("Failed to retrieve data for the IP address.")

    def do_quit(self, arg):
        "Quit the IP Trace Module."
        print("Exiting IP Trace Module.")
        return True

    def query_ip(self, ip):
        "Query ip-api.com for the given IP address."
        try:
            response = requests.get(f'http://ip-api.com/json/{ip}')
            if response.status_code == 200:
                return response.json()
            else:
                print(f"Error querying IP: HTTP {response.status_code}")
                return None
        except Exception as e:
            print(f"An error occurred: {e}")
            return None

    def print_ip_info(self, data):
        "Print information about the IP address from the query response."
        print(f"IP: {data.get('query')}")
        print(f"Country: {data.get('country')}")
        print(f"City: {data.get('city')}")
        print(f"ISP: {data.get('isp')}")
        
class VulnerabilityScanningModule(cmd.Cmd):
    prompt = '(vulnscan) '
    intro = 'Vulnerability Scanning module with Nikto. Type help or ? to list commands.\n'

    def do_scan(self, arg):
        "Scan a web server with Nikto: scan <URL>"
        if not arg:
            print("You must specify a URL to scan.")
            return
        self.run_nikto_scan(arg)

    def do_quit(self, arg):
        "Quit the Vulnerability Scanning Module."
        print("Exiting Vulnerability Scanning Module.")
        return True

    def run_nikto_scan(self, url):
        "Run Nikto scan against a specified URL."
        cmd = f'nikto -h {url}'
        print(f"Running command: {cmd}")
        try:
            subprocess.run(cmd, shell=True)
        except Exception as e:
            print(f'Error running Nikto: {e}')


class PasswordCrackingModule(cmd.Cmd):
    prompt = '(password_cracking) '
    intro = 'Password Cracking Module. Type help or ? to list commands.\n'

    def do_crack_hash(self, arg):
        """Crack a hash using a dictionary attack.\nUsage: crack_hash <hash>"""
        args = arg.split()
        if len(args) != 2:
            print("Usage: crack_hash <hash> <path_to_dictionary>")
            return
        target_hash, dict_path = args
        self.crack_hash_with_dict(target_hash, dict_path)

    def do_quit(self, arg):
        """Return to the main menu."""
        print("Exiting Password Cracking Module.")
        return True

    def crack_hash_with_dict(self, target_hash, dict_path):
        """Attempt to crack the given hash using a dictionary file."""
        try:
            with open(dict_path, 'r') as file:
                for line in file:
                    word = line.strip()
                    # Assuming the hash is SHA-256. Change accordingly if using a different algorithm.
                    if hashlib.sha256(word.encode()).hexdigest() == target_hash:
                        print(f"Password found: {word}")
                        return
                print("Password not found in dictionary.")
        except FileNotFoundError:
            print(f"Dictionary file not found: {dict_path}")


class PentestTool(cmd.Cmd):
    prompt = '(pentest) '
    intro = 'Welcome to the pentesting toolkit. Type help or ? to list commands.\n'

    def do_exit(self, arg):
        """Exit the program."""
        return True

    def do_nmap(self, arg):
        """Switch to the Nmap module."""
        try:
            NmapModule().cmdloop()
        except KeyboardInterrupt:
            print('\nReturning to main menu...')

    def do_iptrace(self, arg):
        """Switch to the IP Trace module."""
        try:
            IPTraceModule().cmdloop()
        except KeyboardInterrupt:
            print('\nReturning to main menu...')
    
    def do_vulnscan(self, arg):
        """Switch to the Vulnerability Scanning module."""
        try:
            VulnerabilityScanningModule().cmdloop()
        except KeyboardInterrupt:
            print('\nReturning to main menu...')
    
    def do_password_cracking(self, arg):
        """Switch to the Password Cracking module."""
        try:
            PasswordCrackingModule().cmdloop()
        except KeyboardInterrupt:
            print('\nReturning to main menu...')

    def do_encryption_decryption(self, arg):
        """Switch to the Encryption/Decryption module."""
        try:
            EncryptionDecryptionModule().cmdloop()
        except KeyboardInterrupt:
            print('\nReturning to main menu...')
            
    # Add other module entry points here


if __name__ == '__main__':
    try:
        PentestTool().cmdloop()
    except KeyboardInterrupt:
        print('\nExiting the pentesting toolkit. Goodbye!')

