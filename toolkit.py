import subprocess
import cmd
import signal
import sys
import requests

def signal_handler(sig, frame):
    print('\nCaught interrupt signal, exiting...')
    sys.exit(0)

# Set the signal handler for SIGINT
signal.signal(signal.SIGINT, signal_handler)

class NmapModule(cmd.Cmd):
    prompt = '(nmap) '
    intro = 'Nmap module. Type help or ? to list commands.\n'

    def do_quit(self, arg):
        """Return to the main menu."""
        print("Exiting Nmap Module.")
        return True

    def do_tcp_syn_scan(self, ip):
        """Perform a TCP SYN port scan.\nUsage: tcp_syn_scan <target_ip>"""
        self.run_nmap('-sS', ip)

    def do_tcp_connect_scan(self, ip):
        """Perform a TCP connect() scan.\nUsage: tcp_connect_scan <target_ip>"""
        self.run_nmap('-sT', ip)

    def do_udp_scan(self, ip):
        """Perform a UDP scan.\nUsage: udp_scan <target_ip>"""
        self.run_nmap('-sU', ip)

    def do_tcp_ack_scan(self, ip):
        """Perform a TCP ACK scan.\nUsage: tcp_ack_scan <target_ip>"""
        self.run_nmap('-sA', ip)

    def do_ping_sweep(self, ip):
        """Perform a ping sweep.\nUsage: ping_sweep <target_ip_range>"""
        self.run_nmap('-sn', ip)

    def do_xmas_scan(self, ip):
        """Perform an XMAS scan.\nUsage: xmas_scan <target_ip>"""
        self.run_nmap('-sX', ip)

    def do_null_scan(self, ip):
        """Perform a NULL scan.\nUsage: null_scan <target_ip>"""
        self.run_nmap('-sN', ip)

    def do_fin_scan(self, ip):
        """Perform a FIN scan.\nUsage: fin_scan <target_ip>"""
        self.run_nmap('-sF', ip)

    def do_os_fingerprinting(self, ip):
        """Perform OS fingerprinting.\nUsage: os_fingerprinting <target_ip>"""
        self.run_nmap('-O', ip)

    def do_version_detection(self, ip):
        """Perform version detection.\nUsage: version_detection <target_ip>"""
        self.run_nmap('-sV', ip)

    def run_nmap(self, scan_type, ip):
        """Helper function to run nmap scans."""
        if ip:
            cmd = f'nmap {scan_type} {ip}'
            print(f"Running command: {cmd}")
            try:
                subprocess.run(cmd.split())
            except Exception as e:
                print(f'Error running command: {cmd}\n{e}')
        else:
            print("IP address or range is required.")

class PentestToolkit(cmd.Cmd):
    intro ='Welcome to the Pentest Toolkit. Type help or ? to list commands.'
    
    def do_exit(self, arg):
        """Exit the program."""
        return True

class IPTraceModule(cmd.Cmd):
    prompt = '(iptrace) '
    intro = 'IP Trace Module. Type help or ? to list commands.\n'

    def do_trace(self, arg):
        "Trace IP: trace <IP address>"
        if not arg:
            print("You must specify an IP address to trace.")
            return
        response = self.query_ip(arg)
        if response:
            self.print_ip_info(response)
        else:
            print("Failed to retrieve data for the IP address.")

    def do_quit(self, arg):
        "Quit the IP Trace Module."
        print("Exiting IP Trace Module.")
        return True

    def query_ip(self, ip):
        "Query ip-api.com for the given IP address."
        try:
            response = requests.get(f'http://ip-api.com/json/{ip}')
            if response.status_code == 200:
                return response.json()
            else:
                print(f"Error querying IP: HTTP {response.status_code}")
                return None
        except Exception as e:
            print(f"An error occurred: {e}")
            return None

    def print_ip_info(self, data):
        "Print information about the IP address from the query response."
        print(f"IP: {data.get('query')}")
        print(f"Country: {data.get('country')}")
        print(f"City: {data.get('city')}")
        print(f"ISP: {data.get('isp')}")

class PentestTool(cmd.Cmd):
    prompt = '(pentest) '
    intro = 'Welcome to the pentesting toolkit. Type help or ? to list commands.\n'

    def do_exit(self, arg):
        """Exit the program."""
        return True

    def do_nmap(self, arg):
        """Switch to the Nmap module."""
        try:
            NmapModule().cmdloop()
        except KeyboardInterrupt:
            print('\nReturning to main menu...')

    def do_iptrace(self, arg):
        """Switch to the IP Trace module."""
        try:
            IPTraceModule().cmdloop()
        except KeyboardInterrupt:
            print('\nReturning to main menu...')

    # Add other module entry points here

if __name__ == '__main__':
    try:
        PentestTool().cmdloop()
    except KeyboardInterrupt:
        print('\nExiting the pentesting toolkit. Goodbye!')

